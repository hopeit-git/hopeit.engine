{
  "type": "object",
  "required": [
    "app"
  ],
  "properties": {
    "app": {
      "$ref": "#/definitions/AppDescriptor"
    },
    "engine": {
      "$ref": "#/definitions/AppEngineConfig",
      "default": {
        "import_modules": null,
        "read_stream_timeout": 1000,
        "read_stream_interval": 1000,
        "default_stream_compression": "lz4",
        "default_stream_serialization": "json+base64",
        "track_headers": [
          "track.request_id",
          "track.request_ts"
        ],
        "cors_origin": null
      }
    },
    "app_connections": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AppConnection"
      },
      "default": {}
    },
    "env": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            }
          ]
        }
      },
      "default": {}
    },
    "events": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/EventDescriptor"
      },
      "default": {}
    },
    "server": {
      "$ref": "#/definitions/ServerConfig"
    },
    "plugins": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AppDescriptor"
      },
      "default": []
    },
    "settings": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "default": {}
    }
  },
  "description": "\n    App Configuration container\n    ",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "definitions": {
    "AppDescriptor": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "description": "\n    App descriptor\n    "
    },
    "AppEngineConfig": {
      "type": "object",
      "properties": {
        "import_modules": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "read_stream_timeout": {
          "type": "integer",
          "default": 1000
        },
        "read_stream_interval": {
          "type": "integer",
          "default": 1000
        },
        "default_stream_compression": {
          "type": "string",
          "enum": [
            "none",
            "lz4",
            "lz4:0",
            "lz4:16",
            "zip",
            "zip:1",
            "zip:9",
            "gzip",
            "gzip:1",
            "gzip:9",
            "bz2",
            "bz2:1",
            "bz2:9",
            "lzma"
          ],
          "default": "lz4"
        },
        "default_stream_serialization": {
          "type": "string",
          "enum": [
            "json",
            "json+base64",
            "pickle:3",
            "pickle:4",
            "pickle:5"
          ],
          "default": "json+base64"
        },
        "track_headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "cors_origin": {
          "type": "string"
        }
      },
      "description": "\n    Engine specific parameters shared among events\n\n    :field import_modules: list of string with the python module names to import to find\n        events and datatype implementations\n    :field read_stream_timeout: timeout in milliseconds to block connection pool when waiting for stream events\n    :field read_stream_interval: delay in milliseconds to wait before attempting a new batch. Use to prevent\n        connection pool to be blocked constantly.\n    :track_headers: list of required X-Track-* headers\n    :cors_origin: allowed CORS origin for web server\n    "
    },
    "AppConnection": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "client": {
          "type": "string",
          "default": "<<NO CLIENT CONFIGURED>>"
        },
        "settings": {
          "type": "string"
        }
      },
      "description": "\n    AppConnections: metadata to initialize app client in order to connect\n    and issue requests to other running apps\n\n    :field: name, str: target app name to connect to\n    :field: version, str: target app version\n    :field: client, str: hopeit.app.client.Client class implementation, from available client plugins\n    :field: settings, optional str: key under `settings` section of app config containing connection configuration,\n        if not specified, plugin will lookup its default section usually the plugin name. But in case multiple\n        clients need to be configured, this value can be overridden.\n    "
    },
    "EventDescriptor": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "STREAM",
            "SERVICE",
            "MULTIPART"
          ]
        },
        "plug_mode": {
          "type": "string",
          "enum": [
            "Standalone",
            "OnApp"
          ],
          "default": "Standalone"
        },
        "route": {
          "type": "string"
        },
        "connections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventConnection"
          },
          "default": []
        },
        "read_stream": {
          "$ref": "#/definitions/ReadStreamDescriptor"
        },
        "write_stream": {
          "$ref": "#/definitions/WriteStreamDescriptor"
        },
        "config": {
          "$ref": "#/definitions/EventConfig",
          "default": {
            "response_timeout": 60.0,
            "logging": {
              "extra_fields": [],
              "stream_fields": [
                "stream.name",
                "stream.msg_id",
                "stream.consumer_group"
              ]
            },
            "stream": {
              "timeout": 60.0,
              "target_max_len": 0,
              "throttle_ms": 0,
              "step_delay": 0,
              "batch_size": 100,
              "compression": null,
              "serialization": null
            }
          }
        },
        "auth": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unsecured",
              "Basic",
              "Bearer",
              "Refresh"
            ]
          },
          "default": []
        }
      },
      "description": "\n    Event descriptor\n    "
    },
    "EventConnection": {
      "type": "object",
      "required": [
        "app_connection",
        "event",
        "type"
      ],
      "properties": {
        "app_connection": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "GET",
            "POST"
          ]
        }
      },
      "description": "\n    EventConnection: describes depedendecies on this event when calling\n    event on apps configured in `app_connections` sections. Only events\n    specified are allowed to be invoked using `hopeit.client`\n\n    :field: app_connection, str: key of app entry used in app_connections sections\n    :field: event, str: target event_name to be called\n    :filed: type, EventConnectionType: a valid event connection type, i.e. GET or POST\n    :field: route, optional str: custom route in case event is not attached to default `app/version/event`\n    "
    },
    "ReadStreamDescriptor": {
      "type": "object",
      "required": [
        "name",
        "consumer_group"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "consumer_group": {
          "type": "string"
        },
        "queues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "AUTO"
          ]
        }
      },
      "description": "\n    Configuration to read streams\n\n    :field stream_name: str, base stream name to read\n    :consumer_group: str, consumer group to send to stream processing engine to keep track of\n        next messag to consume\n    :queues: List[str], list of queue names to poll from. Each queue act as separate stream\n        with queue name used as stream name suffix, where `AUTO` queue name means to consume\n        events when no queue where specified at publish time, allowing to consume message with different\n        priorities without waiting for all events in the stream to be consumed.\n        Queues specified in this entry will be consumed by this event\n        on each poll cycle, on the order specified. If not present\n        only AUTO queue will be consumed. Take into account that in applications using multiple\n        queue names, in order to ensure all messages are consumed, all queue names should be listed\n        here including AUTO, except that the app is intentionally designed for certain events to\n        consume only from specific queues. This configuration is manual to allow consuming messages\n        produced by external apps.\n    "
    },
    "WriteStreamDescriptor": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "queues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "AUTO"
          ]
        },
        "queue_strategy": {
          "type": "string",
          "enum": [
            "PROPAGATE",
            "DROP"
          ],
          "default": "DROP"
        }
      },
      "description": "\n    Configuration to publish messages to a stream\n\n    :field: name, str: stream name\n    :field: queue, List[str], queue names to be used to publish to stream.\n        Each queue act as separate stream with queue name used as stream name suffix,\n        allowing to publish messages to i.e. a queue that will be consumed with priority,\n        or to multiple queues that will be consumed by different readers.\n        Queue suffix will be propagated through events, allowing an event in a defined queue\n        and successive events in following steps to be consumed using same queue name.\n        Notice that queue will be applied only to messages coming from default queue\n        (where queue is not specified at intial message creation). Messages consumed\n        from other queues will be published using same queue name as they have when consumed.\n    :field queue_stategory: strategy to be used when consuming messages from a stream\n        with a queue name and publishing to another stream. Default is `StreamQueueStrategy.DROP`,\n        so in case of complex stream propagating queue names are configured,\n        `StreamQueueStrategy.PROPAGATE` must be explicitly specified.\n    "
    },
    "EventConfig": {
      "type": "object",
      "properties": {
        "response_timeout": {
          "type": "number",
          "default": 60.0
        },
        "logging": {
          "$ref": "#/definitions/EventLoggingConfig",
          "default": {
            "extra_fields": [],
            "stream_fields": [
              "stream.name",
              "stream.msg_id",
              "stream.consumer_group"
            ]
          }
        },
        "stream": {
          "$ref": "#/definitions/EventStreamConfig",
          "default": {
            "timeout": 60.0,
            "target_max_len": 0,
            "throttle_ms": 0,
            "step_delay": 0,
            "batch_size": 100,
            "compression": null,
            "serialization": null
          }
        }
      },
      "description": "\n    Event execution configuration\n    :field response_timeout: float, default 60.0: seconds to timeout waiting for event execution\n        when invoked externally .i.e. GET or POST events. If exceeded, Timed Out response will be returned.\n        Notice that this timeout does not apply for stream processing events. Use EventStreamsConfig.timeout\n        to set up timeout on stream processing.\n    :field logging: EventLoggingConfig, configuration for logging for this particular event\n    :field stream: EventStreamConfig, configuration for stream processing for this particular event\n    "
    },
    "EventLoggingConfig": {
      "type": "object",
      "properties": {
        "extra_fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "stream_fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "description": "\n    Logging configuration specific for the event\n\n    :field extra_fields: list of str, extra fields required to apps when logging\n        as part of extra(...) call\n    :field stream_fields: list of str, field names to extra when reading streams,\n        valid options are\n            'name': stream name,\n            'msg_id', internal message id\n            'consumer_group', conaumer group name\n            'submit_ts', utc time message was submited to stream\n            'event_ts', event timestamp from @data_event\n            'event_id', event id from @data_event\n            'read_ts': uct time when message was consumed from stream\n    "
    },
    "EventStreamConfig": {
      "type": "object",
      "properties": {
        "timeout": {
          "type": "number",
          "default": 60.0
        },
        "target_max_len": {
          "type": "integer",
          "default": 0
        },
        "throttle_ms": {
          "type": "integer",
          "default": 0
        },
        "step_delay": {
          "type": "integer",
          "default": 0
        },
        "batch_size": {
          "type": "integer",
          "default": 100
        },
        "compression": {
          "type": "string",
          "enum": [
            "none",
            "lz4",
            "lz4:0",
            "lz4:16",
            "zip",
            "zip:1",
            "zip:9",
            "gzip",
            "gzip:1",
            "gzip:9",
            "bz2",
            "bz2:1",
            "bz2:9",
            "lzma"
          ]
        },
        "serialization": {
          "type": "string",
          "enum": [
            "json",
            "json+base64",
            "pickle:3",
            "pickle:4",
            "pickle:5"
          ]
        }
      },
      "description": "\n    Stream configuration for STREAM events\n    :field timeout: float, timeout for stream processing im seconds. If timeout is exceeded event\n        processing will be cancelled. Default 60 seconds\n    :field target_max_len: int, default 0, max number of elements to be used as a target\n        for the stream collection size. Messages above this value might be dropped\n        from the collection when new items are added. Notice that the number of the items\n        in the collection could exceed temporary this value to allow optimized behaviour,\n        but no items will be dropped until the collection exceeds target_max_len.\n        With default value of 0, collection size is unlimited and items should be removed by apps.\n    :field throttle_ms: int, milliseconds specifying minimum duration for each event\n    :filed step_delay: int, milliseconds to sleep between steps\n    :field batch_size: int, number of max messages to process each time when reading stream,\n        set to 1 to ensure min losses in case of process stop, set higher for performance\n    :field compression: Compression, compression algorithm used to send messages to stream, if not specified\n        default from Server config will be used.\n    :field serialization: Serialization, serialization method used to send messages to stream, if not specified\n        default from Server config will be used.\n    "
    },
    "ServerConfig": {
      "type": "object",
      "properties": {
        "streams": {
          "$ref": "#/definitions/StreamsConfig",
          "default": {
            "stream_manager": "hopeit.streams.NoStreamManager",
            "connection_str": "<<NoStreamManager>>",
            "delay_auto_start_seconds": 3
          }
        },
        "logging": {
          "$ref": "#/definitions/LoggingConfig",
          "default": {
            "log_level": "INFO",
            "log_path": "logs/"
          }
        },
        "auth": {
          "$ref": "#/definitions/AuthConfig",
          "default": {
            "secrets_location": ".secrets/",
            "auth_passphrase": "",
            "enabled": false,
            "create_keys": false,
            "domain": null,
            "encryption_algorithm": "RS256",
            "default_auth_methods": [
              "Unsecured"
            ]
          }
        },
        "api": {
          "$ref": "#/definitions/APIConfig",
          "default": {
            "docs_path": null
          }
        },
        "engine_version": {
          "type": "string",
          "default": "0.9.0"
        }
      },
      "description": "\n    Server configuration\n    "
    },
    "StreamsConfig": {
      "type": "object",
      "properties": {
        "stream_manager": {
          "type": "string",
          "default": "hopeit.streams.NoStreamManager"
        },
        "connection_str": {
          "type": "string",
          "default": "<<NoStreamManager>>"
        },
        "delay_auto_start_seconds": {
          "type": "integer",
          "default": 3
        }
      },
      "description": "\n    :field connection_str: str, url to connect to streams server: i.e. redis://localhost:6379\n    "
    },
    "LoggingConfig": {
      "type": "object",
      "properties": {
        "log_level": {
          "type": "string",
          "default": "INFO"
        },
        "log_path": {
          "type": "string",
          "default": "logs/"
        }
      },
      "description": "LoggingConfig(log_level: str = 'INFO', log_path: str = 'logs/')"
    },
    "AuthConfig": {
      "type": "object",
      "required": [
        "secrets_location",
        "auth_passphrase"
      ],
      "properties": {
        "secrets_location": {
          "type": "string"
        },
        "auth_passphrase": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "default": true
        },
        "create_keys": {
          "type": "boolean",
          "default": false
        },
        "domain": {
          "type": "string"
        },
        "encryption_algorithm": {
          "type": "string",
          "default": "RS256"
        },
        "default_auth_methods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unsecured",
              "Basic",
              "Bearer",
              "Refresh"
            ]
          },
          "default": []
        }
      },
      "description": "\n    Server configuration to handle authorization tokens\n    "
    },
    "APIConfig": {
      "type": "object",
      "properties": {
        "docs_path": {
          "type": "string"
        }
      },
      "description": "\n    Config for Open API docs page\n    "
    }
  }
}