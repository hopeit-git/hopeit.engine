{
  "type": "object",
  "required": [
    "app"
  ],
  "properties": {
    "app": {
      "$ref": "#/definitions/AppDescriptor"
    },
    "engine": {
      "$ref": "#/definitions/AppEngineConfig",
      "default": {
        "import_modules": null,
        "read_stream_timeout": 1000,
        "read_stream_interval": 1000,
        "default_stream_compression": "lz4",
        "default_stream_serialization": "json+base64",
        "track_headers": [
          "track.request_id",
          "track.request_ts"
        ],
        "cors_origin": null
      }
    },
    "env": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            }
          ]
        }
      },
      "default": {}
    },
    "events": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/EventDescriptor"
      },
      "default": {}
    },
    "server": {
      "$ref": "#/definitions/ServerConfig"
    },
    "plugins": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AppDescriptor"
      },
      "default": []
    }
  },
  "description": "\n    App Configuration container\n    ",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "definitions": {
    "AppDescriptor": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "description": "\n    App descriptor\n    "
    },
    "AppEngineConfig": {
      "type": "object",
      "properties": {
        "import_modules": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "read_stream_timeout": {
          "type": "integer",
          "default": 1000
        },
        "read_stream_interval": {
          "type": "integer",
          "default": 1000
        },
        "default_stream_compression": {
          "type": "string",
          "enum": [
            "none",
            "lz4",
            "lz4:0",
            "lz4:16",
            "zip",
            "zip:1",
            "zip:9",
            "gzip",
            "gzip:1",
            "gzip:9",
            "bz2",
            "bz2:1",
            "bz2:9",
            "lzma"
          ],
          "default": "lz4"
        },
        "default_stream_serialization": {
          "type": "string",
          "enum": [
            "json",
            "json+base64",
            "pickle:3",
            "pickle:4",
            "pickle:5"
          ],
          "default": "json+base64"
        },
        "track_headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "cors_origin": {
          "type": "string"
        }
      },
      "description": "\n    Engine specific parameters shared among events\n\n    :field import_modules: list of string with the python module names to import to find\n        events and datatype implementations\n    :field read_stream_timeout: timeout in milliseconds to block connection pool when waiting for stream events\n    :field read_stream_interval: delay in milliseconds to wait before attempting a new batch. Use to prevent\n        connection pool to be blocked constantly.\n    :track_headers: list of required X-Track-* headers\n    :cors_origin: allowed CORS origin for web server\n    "
    },
    "EventDescriptor": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "STREAM",
            "SERVICE",
            "MULTIPART"
          ]
        },
        "plug_mode": {
          "type": "string",
          "enum": [
            "Standalone",
            "OnApp"
          ],
          "default": "Standalone"
        },
        "route": {
          "type": "string"
        },
        "read_stream": {
          "$ref": "#/definitions/StreamDescriptor"
        },
        "write_stream": {
          "$ref": "#/definitions/StreamDescriptor"
        },
        "config": {
          "$ref": "#/definitions/EventConfig",
          "default": {
            "response_timeout": 60.0,
            "logging": {
              "extra_fields": [],
              "stream_fields": [
                "stream.name",
                "stream.msg_id",
                "stream.consumer_group"
              ]
            },
            "stream": {
              "timeout": 60.0,
              "target_max_len": 0,
              "throttle_ms": 0,
              "step_delay": 0,
              "batch_size": 100,
              "compression": null,
              "serialization": null
            }
          }
        },
        "auth": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unsecured",
              "Basic",
              "Bearer",
              "Refresh"
            ]
          },
          "default": []
        }
      },
      "description": "\n    Event descriptor\n    "
    },
    "StreamDescriptor": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "consumer_group": {
          "type": "string"
        }
      },
      "description": "StreamDescriptor(name: str, consumer_group: Union[str, NoneType] = None)"
    },
    "EventConfig": {
      "type": "object",
      "properties": {
        "response_timeout": {
          "type": "number",
          "default": 60.0
        },
        "logging": {
          "$ref": "#/definitions/EventLoggingConfig",
          "default": {
            "extra_fields": [],
            "stream_fields": [
              "stream.name",
              "stream.msg_id",
              "stream.consumer_group"
            ]
          }
        },
        "stream": {
          "$ref": "#/definitions/EventStreamConfig",
          "default": {
            "timeout": 60.0,
            "target_max_len": 0,
            "throttle_ms": 0,
            "step_delay": 0,
            "batch_size": 100,
            "compression": null,
            "serialization": null
          }
        }
      },
      "description": "\n    Event execution configuration\n    :field response_timeout: float, default 60.0: seconds to timeout waiting for event execution\n        when invoked externally .i.e. GET or POST events. If exceeded, Timed Out response will be returned.\n        Notice that this timeout does not apply for stream processing events. Use EventStreamsConfig.timeout\n        to set up timeout on stream processing.\n    :field logging: EventLoggingConfig, configuration for logging for this particular event\n    :field stream: EventStreamConfig, configuration for stream processing for this particular event\n    "
    },
    "EventLoggingConfig": {
      "type": "object",
      "properties": {
        "extra_fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "stream_fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "description": "\n    Logging configuration specific for the event\n\n    :field extra_fields: list of str, extra fields required to apps when logging\n        as part of extra(...) call\n    :field stream_fields: list of str, field names to extra when reading streams,\n        valid options are\n            'name': stream name,\n            'msg_id', internal message id\n            'consumer_group', conaumer group name\n            'submit_ts', utc time message was submited to stream\n            'event_ts', event timestamp from @data_event\n            'event_id', event id from @data_event\n            'read_ts': uct time when message was consumed from stream\n    "
    },
    "EventStreamConfig": {
      "type": "object",
      "properties": {
        "timeout": {
          "type": "number",
          "default": 60.0
        },
        "target_max_len": {
          "type": "integer",
          "default": 0
        },
        "throttle_ms": {
          "type": "integer",
          "default": 0
        },
        "step_delay": {
          "type": "integer",
          "default": 0
        },
        "batch_size": {
          "type": "integer",
          "default": 100
        },
        "compression": {
          "type": "string",
          "enum": [
            "none",
            "lz4",
            "lz4:0",
            "lz4:16",
            "zip",
            "zip:1",
            "zip:9",
            "gzip",
            "gzip:1",
            "gzip:9",
            "bz2",
            "bz2:1",
            "bz2:9",
            "lzma"
          ]
        },
        "serialization": {
          "type": "string",
          "enum": [
            "json",
            "json+base64",
            "pickle:3",
            "pickle:4",
            "pickle:5"
          ]
        }
      },
      "description": "\n    Stream configuration for STREAM events\n    :field timeout: float, timeout for stream processing im seconds. If timeout is exceeded event\n        processing will be cancelled. Default 60 seconds\n    :field target_max_len: int, default 0, max number of elements to be used as a target\n        for the stream collection size. Messages above this value might be dropped\n        from the collection when new items are added. Notice that the number of the items\n        in the collection could exceed temporary this value to allow optimized behaviour,\n        but no items will be dropped until the collection exceeds target_max_len.\n        With default value of 0, collection size is unlimited and items should be removed by apps.\n    :field throttle_ms: int, milliseconds specifying minimum duration for each event\n    :filed step_delay: int, milliseconds to sleep between steps\n    :field batch_size: int, number of max messages to process each time when reading stream,\n        set to 1 to ensure min losses in case of process stop, set higher for performance\n    :field compression: Compression, compression algorithm used to send messages to stream, if not specified\n        default from Server config will be used.\n    :field serialization: Serialization, serialization method used to send messages to stream, if not specified\n        default from Server config will be used.\n    "
    },
    "ServerConfig": {
      "type": "object",
      "properties": {
        "streams": {
          "$ref": "#/definitions/StreamsConfig",
          "default": {
            "stream_manager": "hopeit.streams.NoStreamManager",
            "connection_str": "<<NoStreamManager>>",
            "delay_auto_start_seconds": 3
          }
        },
        "logging": {
          "$ref": "#/definitions/LoggingConfig",
          "default": {
            "log_level": "INFO",
            "log_path": "logs/"
          }
        },
        "auth": {
          "$ref": "#/definitions/AuthConfig",
          "default": {
            "secrets_location": "",
            "auth_passphrase": "",
            "enabled": false,
            "create_keys": false,
            "domain": null,
            "encryption_algorithm": "RS256",
            "default_auth_methods": [
              "Unsecured"
            ]
          }
        },
        "api": {
          "$ref": "#/definitions/APIConfig",
          "default": {
            "docs_path": null
          }
        }
      },
      "description": "ServerConfig(streams: hopeit.server.config.StreamsConfig = <factory>, logging: hopeit.server.config.LoggingConfig = <factory>, auth: hopeit.server.config.AuthConfig = <factory>, api: hopeit.server.config.APIConfig = <factory>)"
    },
    "StreamsConfig": {
      "type": "object",
      "properties": {
        "stream_manager": {
          "type": "string",
          "default": "hopeit.streams.NoStreamManager"
        },
        "connection_str": {
          "type": "string",
          "default": "<<NoStreamManager>>"
        },
        "delay_auto_start_seconds": {
          "type": "integer",
          "default": 3
        }
      },
      "description": "\n    :field connection_str: str, url to connect to streams server: i.e. redis://localhost:6379\n    "
    },
    "LoggingConfig": {
      "type": "object",
      "properties": {
        "log_level": {
          "type": "string",
          "default": "INFO"
        },
        "log_path": {
          "type": "string",
          "default": "logs/"
        }
      },
      "description": "LoggingConfig(log_level: str = 'INFO', log_path: str = 'logs/')"
    },
    "AuthConfig": {
      "type": "object",
      "required": [
        "secrets_location",
        "auth_passphrase"
      ],
      "properties": {
        "secrets_location": {
          "type": "string"
        },
        "auth_passphrase": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "default": true
        },
        "create_keys": {
          "type": "boolean",
          "default": false
        },
        "domain": {
          "type": "string"
        },
        "encryption_algorithm": {
          "type": "string",
          "default": "RS256"
        },
        "default_auth_methods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unsecured",
              "Basic",
              "Bearer",
              "Refresh"
            ]
          },
          "default": []
        }
      },
      "description": "\n    Server configuration to handle authorization tokens\n    "
    },
    "APIConfig": {
      "type": "object",
      "properties": {
        "docs_path": {
          "type": "string"
        }
      },
      "description": "APIConfig(docs_path: Union[str, NoneType] = None)"
    }
  }
}