{
  "openapi": "3.0.3",
  "info": {
    "version": "0.24",
    "title": "Dataframes Example",
    "description": "Dataframes Example"
  },
  "paths": {
    "/api/basic-auth/0x24/decode": {
      "get": {
        "summary": "Basic Auth: Decode",
        "description": "Returns decoded auth info",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information extracted from token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextUserInfo"
                }
              }
            }
          }
        },
        "tags": [
          "basic_auth.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/config-manager/0x24/runtime-apps-config": {
      "get": {
        "summary": "Config Manager: Runtime Apps Config",
        "description": "Returns the runtime config for the Apps running on this server",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": false,
            "description": "URL used to reach this server, informative",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand_events",
            "in": "query",
            "required": false,
            "description": "Retrieve expanded effective events from event steps",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config info about running apps in current process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuntimeApps"
                }
              }
            }
          }
        },
        "tags": [
          "config_manager.0x24"
        ]
      }
    },
    "/api/config-manager/0x24/cluster-apps-config": {
      "get": {
        "summary": "Config Manager: Cluster Apps Config",
        "description": "Handle remote access to runtime configuration for a group of hosts",
        "parameters": [
          {
            "name": "hosts",
            "in": "query",
            "required": true,
            "description": "Comma-separated list of http://host:port strings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand_events",
            "in": "query",
            "required": true,
            "description": "Extract effective events from event steps",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Combined config info about running apps in provided list of hosts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuntimeApps"
                }
              }
            }
          }
        },
        "tags": [
          "config_manager.0x24"
        ]
      }
    },
    "/api/dataframes-example/0x24/prepare-data": {
      "get": {
        "summary": "Prepare Data",
        "description": "Prepare Data",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "InputData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InputData"
                }
              }
            }
          }
        },
        "tags": [
          "dataframes_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/dataframes-example/0x24/train-model": {
      "post": {
        "summary": "Training Pipeline",
        "description": "Training Pipeline",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "Serialized dataframeobject with iris dataset",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Iris",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Iris"
                }
              }
            }
          }
        },
        "tags": [
          "dataframes_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/dataframes-example/0x24/predict": {
      "post": {
        "summary": "Predict",
        "description": "Predict",
        "parameters": [
          {
            "name": "experiment_id",
            "in": "query",
            "required": true,
            "description": "experiment_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "Batch of prediction requests",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IrisBatchPredictionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IrisFeatures"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dataframes_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/dataframes-example/0x24/basic-auth/0x24/login": {
      "get": {
        "summary": "Basic Auth: Login",
        "description": "Handles users login using basic-auth\nand generate access tokens for external services invoking apps\nplugged in with basic-auth plugin.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication information to be used for further API calls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInfo"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "dataframes_example.0x24"
        ],
        "security": [
          {
            "auth.basic": []
          }
        ]
      }
    },
    "/api/dataframes-example/0x24/basic-auth/0x24/refresh": {
      "get": {
        "summary": "Basic Auth: Refresh",
        "description": "This event can be used for obtain new access token and update refresh token (http cookie),\nwith no need to re-login the user if there is a valid refresh token active.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refreshed authentication information to be used for further API calls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInfo"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials. An http-cookie is expected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "dataframes_example.0x24"
        ],
        "security": [
          {
            "dataframes_example.0x24.refresh": []
          }
        ]
      }
    },
    "/api/dataframes-example/0x24/basic-auth/0x24/logout": {
      "get": {
        "summary": "Basic Auth: Logout",
        "description": "Invalidates previous refresh cookies.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logged out message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "logout"
                  ],
                  "properties": {
                    "logout": {
                      "type": "string"
                    }
                  },
                  "description": "logout string payload"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "dataframes_example.0x24"
        ],
        "security": [
          {
            "dataframes_example.0x24.refresh": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorInfo": {
        "type": "object",
        "required": [
          "msg",
          "tb"
        ],
        "properties": {
          "msg": {
            "type": "string"
          },
          "tb": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "x-module-name": "hopeit.server.errors",
        "description": "\n    Error information to be returned in failed responses\n    "
      },
      "ContextUserInfo": {
        "type": "object",
        "required": [
          "id",
          "user",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "x-module-name": "hopeit.basic_auth",
        "description": "\n    User info that will be available in context during events execution\n    "
      },
      "AuthInfo": {
        "type": "object",
        "required": [
          "access_token",
          "token_type",
          "renew"
        ],
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "renew": {
            "type": "integer"
          }
        },
        "x-module-name": "hopeit.basic_auth",
        "description": "\n    Minimal auth info that should be returned outside this app\n    "
      },
      "RuntimeAppInfo": {
        "type": "object",
        "required": [
          "servers",
          "app_config",
          "effective_events"
        ],
        "properties": {
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerInfo"
            }
          },
          "app_config": {
            "$ref": "#/components/schemas/AppConfig"
          },
          "effective_events": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EventDescriptor"
            }
          }
        },
        "x-module-name": "hopeit.config_manager",
        "description": "\n    Application config information associated to servers at runtime\n    "
      },
      "ServerInfo": {
        "type": "object",
        "required": [
          "host_name",
          "pid"
        ],
        "properties": {
          "host_name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "default": "in-process"
          }
        },
        "x-module-name": "hopeit.config_manager",
        "description": "\n    Server info associated with runtime apps\n    "
      },
      "AppConfig": {
        "type": "object",
        "required": [
          "app"
        ],
        "properties": {
          "app": {
            "$ref": "#/components/schemas/AppDescriptor"
          },
          "engine": {
            "$ref": "#/components/schemas/AppEngineConfig",
            "default": {
              "import_modules": null,
              "read_stream_timeout": 1000,
              "read_stream_interval": 1000,
              "default_stream_compression": "lz4",
              "default_stream_serialization": "json+base64",
              "track_headers": [
                "track.request_id",
                "track.request_ts"
              ],
              "cors_origin": null
            }
          },
          "app_connections": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AppConnection"
            },
            "default": {}
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "default": {}
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EventDescriptor"
            },
            "default": {}
          },
          "server": {
            "$ref": "#/components/schemas/ServerConfig"
          },
          "plugins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppDescriptor"
            },
            "default": []
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "default": {}
          },
          "effective_settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "x-module-name": "hopeit.app.config",
        "description": "\n    App Configuration container\n    "
      },
      "AppDescriptor": {
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "x-module-name": "hopeit.app.config",
        "description": "\n    App descriptor\n    "
      },
      "AppEngineConfig": {
        "type": "object",
        "properties": {
          "import_modules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "read_stream_timeout": {
            "type": "integer",
            "default": 1000
          },
          "read_stream_interval": {
            "type": "integer",
            "default": 1000
          },
          "default_stream_compression": {
            "type": "string",
            "enum": [
              "none",
              "lz4",
              "lz4:0",
              "lz4:16",
              "zip",
              "zip:1",
              "zip:9",
              "gzip",
              "gzip:1",
              "gzip:9",
              "bz2",
              "bz2:1",
              "bz2:9",
              "lzma"
            ],
            "x-enum-name": "Compression",
            "x-module-name": "hopeit.app.config",
            "default": "lz4"
          },
          "default_stream_serialization": {
            "type": "string",
            "enum": [
              "json",
              "json+base64",
              "pickle:3",
              "pickle:4",
              "pickle:5"
            ],
            "x-enum-name": "Serialization",
            "x-module-name": "hopeit.app.config",
            "default": "json+base64"
          },
          "track_headers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "cors_origin": {
            "type": "string"
          }
        },
        "x-module-name": "hopeit.app.config",
        "description": "\n    Engine specific parameters shared among events\n\n    :field import_modules: list of string with the python module names to import to find\n        events and datatype implementations\n    :field read_stream_timeout: timeout in milliseconds to block connection pool when waiting for stream events\n    :field read_stream_interval: delay in milliseconds to wait before attempting a new batch. Use to prevent\n        connection pool to be blocked constantly.\n    :track_headers: list of required X-Track-* headers\n    :cors_origin: allowed CORS origin for web server\n    "
      },
      "AppConnection": {
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "client": {
            "type": "string",
            "default": "<<NO CLIENT CONFIGURED>>"
          },
          "settings": {
            "type": "string"
          },
          "plugin_name": {
            "type": "string"
          },
          "plugin_version": {
            "type": "string"
          }
        },
        "x-module-name": "hopeit.app.config",
        "description": "\n    AppConnections: metadata to initialize app client in order to connect\n    and issue requests to other running apps\n\n    :field: name, str: target app name to connect to\n    :field: version, str: target app version\n    :field: client, str: hopeit.app.client.Client class implementation, from available client plugins\n    :field: settings, optional str: key under `settings` section of app config containing connection configuration,\n        if not specified, plugin will lookup its default section usually the plugin name. But in case multiple\n        clients need to be configured, this value can be overridden.\n    "
      },
      "EventDescriptor": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "STREAM",
              "SERVICE",
              "MULTIPART",
              "SETUP"
            ],
            "x-enum-name": "EventType",
            "x-module-name": "hopeit.app.config"
          },
          "plug_mode": {
            "type": "string",
            "enum": [
              "Standalone",
              "OnApp"
            ],
            "x-enum-name": "EventPlugMode",
            "x-module-name": "hopeit.app.config",
            "default": "Standalone"
          },
          "route": {
            "type": "string"
          },
          "impl": {
            "type": "string"
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventConnection"
            },
            "default": []
          },
          "read_stream": {
            "$ref": "#/components/schemas/ReadStreamDescriptor"
          },
          "write_stream": {
            "$ref": "#/components/schemas/WriteStreamDescriptor"
          },
          "auth": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unsecured",
                "Basic",
                "Bearer",
                "Refresh"
              ],
              "x-enum-name": "AuthType",
              "x-module-name": "hopeit.server.config"
            },
            "default": []
          },
          "setting_keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "dataobjects": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "group": {
            "type": "string",
            "default": "DEFAULT"
          }
        },
        "x-module-name": "hopeit.app.config",
        "description": "\n    Event Descriptor: configures event implementation\n\n    :field: type, EventType: type of event i.e.: GET, POST, MULTIPART, STREAM, SERVICE, SETUP\n    :field: plug_mode, EventPlugMode: defines whether an event defined in a plugin is created in the\n        current app (ON_APP) or it will be created in the original plugin (STANDALONE, default)\n    :field: route, optional str: custom route for endpoint. If not specified route will be derived\n        from `/api/app_name/app_version/event_name`\n    :field: impl, optional str: custom event implementation Python module. If not specified, module\n        with same same as event will be imported.\n    :field: connections, list of EventConnection: specifies dependencies on other apps/endpoints,\n        that can be used by client plugins to call events on external apps\n    :field: read_stream, optional ReadStreamDescriptor: specifies source stream to read from.\n        Valid only for STREAM events.\n    :field: write_stream, optional WriteStreamDescriptor: for any type of events, resultant dataobjects will\n        be published to the specified stream.\n    :field: auth, list of AuthType: supported authentication schemas for this event. If not specified\n        application default will be used.\n    :field: setting_keys, list of str: by default EventContext will have access to the settings section\n        with the same name of the event using `settings = context.settings(datatype=MySettingsType)`.\n        In case additional sections are needed to be accessed from\n        EventContext, then a list of setting keys, including the name of the event if needed,\n        can be specified here. Then access to a `custom` key can be done using\n        `custom_settings = context.settings(key=\"customer\", datatype=MyCustomSettingsType)`\n    :field: dataobjects, list of str: list of full qualified dataobject types that this event can process.\n        When not specified, the engine will inspect the module implementation and find all datatypes supported\n        as payload in the functions defined as `__steps__`. In case of generic functions that support\n        `payload: DataObject` argument, then a list of full qualified datatypes must be specified here.\n    :field: group, str: group name, if none is assigned it is automatically assigned as 'DEFAULT'.\n    "
      },
      "EventConnection": {
        "type": "object",
        "required": [
          "app_connection",
          "event",
          "type"
        ],
        "properties": {
          "app_connection": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GET",
              "POST"
            ],
            "x-enum-name": "EventConnectionType",
            "x-module-name": "hopeit.app.config"
          }
        },
        "x-module-name": "hopeit.app.config",
        "description": "\n    EventConnection: describes dependencies on this event when calling\n    event on apps configured in `app_connections` sections. Only events\n    specified are allowed to be invoked using `hopeit.client`\n\n    :field: app_connection, str: key of app entry used in app_connections sections\n    :field: event, str: target event_name to be called\n    :filed: type, EventConnectionType: a valid event connection type, i.e. GET or POST\n    :field: route, optional str: custom route in case event is not attached to default `app/version/event`\n    "
      },
      "ReadStreamDescriptor": {
        "type": "object",
        "required": [
          "name",
          "consumer_group"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "consumer_group": {
            "type": "string"
          },
          "queues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "AUTO"
            ]
          }
        },
        "x-module-name": "hopeit.app.config",
        "description": "\n    Configuration to read streams\n\n    :field stream_name: str, base stream name to read\n    :consumer_group: str, consumer group to send to stream processing engine to keep track of\n        next messag to consume\n    :queues: List[str], list of queue names to poll from. Each queue act as separate stream\n        with queue name used as stream name suffix, where `AUTO` queue name means to consume\n        events when no queue where specified at publish time, allowing to consume message with different\n        priorities without waiting for all events in the stream to be consumed.\n        Queues specified in this entry will be consumed by this event\n        on each poll cycle, on the order specified. If not present\n        only AUTO queue will be consumed. Take into account that in applications using multiple\n        queue names, in order to ensure all messages are consumed, all queue names should be listed\n        here including AUTO, except that the app is intentionally designed for certain events to\n        consume only from specific queues. This configuration is manual to allow consuming messages\n        produced by external apps.\n    "
      },
      "WriteStreamDescriptor": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "queues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "AUTO"
            ]
          },
          "queue_strategy": {
            "type": "string",
            "enum": [
              "PROPAGATE",
              "DROP"
            ],
            "x-enum-name": "StreamQueueStrategy",
            "x-module-name": "hopeit.app.config",
            "default": "DROP"
          }
        },
        "x-module-name": "hopeit.app.config",
        "description": "\n    Configuration to publish messages to a stream\n\n    :field: name, str: stream name\n    :field: queue, List[str], queue names to be used to publish to stream.\n        Each queue act as separate stream with queue name used as stream name suffix,\n        allowing to publish messages to i.e. a queue that will be consumed with priority,\n        or to multiple queues that will be consumed by different readers.\n        Queue suffix will be propagated through events, allowing an event in a defined queue\n        and successive events in following steps to be consumed using same queue name.\n        Notice that queue will be applied only to messages coming from default queue\n        (where queue is not specified at intial message creation). Messages consumed\n        from other queues will be published using same queue name as they have when consumed.\n    :field queue_stategory: strategy to be used when consuming messages from a stream\n        with a queue name and publishing to another stream. Default is `StreamQueueStrategy.DROP`,\n        so in case of complex stream propagating queue names are configured,\n        `StreamQueueStrategy.PROPAGATE` must be explicitly specified.\n    "
      },
      "ServerConfig": {
        "type": "object",
        "properties": {
          "streams": {
            "$ref": "#/components/schemas/StreamsConfig",
            "default": {
              "stream_manager": "hopeit.streams.NoStreamManager",
              "connection_str": "<<NoStreamManager>>",
              "delay_auto_start_seconds": 3,
              "initial_backoff_seconds": 1.0,
              "max_backoff_seconds": 60.0,
              "num_failures_open_circuit_breaker": 1
            }
          },
          "logging": {
            "$ref": "#/components/schemas/LoggingConfig",
            "default": {
              "log_level": "INFO",
              "log_path": "logs/"
            }
          },
          "auth": {
            "$ref": "#/components/schemas/AuthConfig",
            "default": {
              "secrets_location": ".secrets/",
              "auth_passphrase": "",
              "enabled": false,
              "create_keys": false,
              "domain": null,
              "encryption_algorithm": "RS256",
              "default_auth_methods": [
                "Unsecured"
              ]
            }
          },
          "api": {
            "$ref": "#/components/schemas/APIConfig",
            "default": {
              "docs_path": null
            }
          },
          "engine_version": {
            "type": "string",
            "default": "0.24.1"
          }
        },
        "x-module-name": "hopeit.server.config",
        "description": "\n    Server configuration\n    "
      },
      "StreamsConfig": {
        "type": "object",
        "properties": {
          "stream_manager": {
            "type": "string",
            "default": "hopeit.streams.NoStreamManager"
          },
          "connection_str": {
            "type": "string",
            "default": "<<NoStreamManager>>"
          },
          "delay_auto_start_seconds": {
            "type": "integer",
            "default": 3
          },
          "initial_backoff_seconds": {
            "type": "number",
            "default": 1.0
          },
          "max_backoff_seconds": {
            "type": "number",
            "default": 60.0
          },
          "num_failures_open_circuit_breaker": {
            "type": "integer",
            "default": 1
          }
        },
        "x-module-name": "hopeit.server.config",
        "description": "\n    :field connection_str: str, url to connect to streams server: i.e. redis://localhost:6379\n        if using redis stream manager plugin to connect locally\n    "
      },
      "LoggingConfig": {
        "type": "object",
        "properties": {
          "log_level": {
            "type": "string",
            "default": "INFO"
          },
          "log_path": {
            "type": "string",
            "default": "logs/"
          }
        },
        "x-module-name": "hopeit.server.config",
        "description": "LoggingConfig(log_level: str = 'INFO', log_path: str = 'logs/')"
      },
      "AuthConfig": {
        "type": "object",
        "required": [
          "secrets_location",
          "auth_passphrase"
        ],
        "properties": {
          "secrets_location": {
            "type": "string"
          },
          "auth_passphrase": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "create_keys": {
            "type": "boolean",
            "default": false
          },
          "domain": {
            "type": "string"
          },
          "encryption_algorithm": {
            "type": "string",
            "default": "RS256"
          },
          "default_auth_methods": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unsecured",
                "Basic",
                "Bearer",
                "Refresh"
              ],
              "x-enum-name": "AuthType",
              "x-module-name": "hopeit.server.config"
            },
            "default": []
          }
        },
        "x-module-name": "hopeit.server.config",
        "description": "\n    Server configuration to handle authorization tokens\n    "
      },
      "APIConfig": {
        "type": "object",
        "properties": {
          "docs_path": {
            "type": "string"
          }
        },
        "x-module-name": "hopeit.server.config",
        "description": "\n    Config for Open API docs page\n    "
      },
      "RuntimeApps": {
        "type": "object",
        "required": [
          "apps"
        ],
        "properties": {
          "apps": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RuntimeAppInfo"
            }
          },
          "server_status": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ALIVE",
                "ERROR"
              ],
              "x-enum-name": "ServerStatus",
              "x-module-name": "hopeit.config_manager"
            },
            "default": {}
          }
        },
        "x-module-name": "hopeit.config_manager",
        "description": "\n    Combined App Config and Server Status information for running apps\n    "
      },
      "Iris": {
        "type": "object",
        "required": [
          "sepal_length",
          "sepal_width",
          "petal_length",
          "petal_width",
          "variety"
        ],
        "properties": {
          "sepal_length": {
            "type": "number"
          },
          "sepal_width": {
            "type": "number"
          },
          "petal_length": {
            "type": "number"
          },
          "petal_width": {
            "type": "number"
          },
          "variety": {
            "type": "integer"
          }
        },
        "x-module-name": "hopeit.dataframes.dataframe",
        "description": "Iris_(sepal_length: float, sepal_width: float, petal_length: float, petal_width: float, variety: int)"
      },
      "Dataset": {
        "type": "object",
        "required": [
          "protocol",
          "partition_key",
          "key",
          "datatype"
        ],
        "properties": {
          "protocol": {
            "type": "string"
          },
          "partition_key": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "datatype": {
            "type": "string"
          }
        },
        "x-module-name": "hopeit.dataframes.serialization.dataset",
        "description": "Dataset(protocol: str, partition_key: str, key: str, datatype: str)"
      },
      "InputData": {
        "type": "object",
        "required": [
          "iris"
        ],
        "properties": {
          "iris": {
            "$ref": "#/components/schemas/Dataset"
          }
        },
        "x-module-name": "hopeit.dataframes.dataframeobject",
        "description": "InputData_(iris: hopeit.dataframes.serialization.dataset.Dataset)"
      },
      "IrisPredictionRequest": {
        "type": "object",
        "required": [
          "prediction_id",
          "features"
        ],
        "properties": {
          "prediction_id": {
            "type": "string"
          },
          "features": {
            "$ref": "#/components/schemas/IrisFeatures"
          }
        },
        "x-module-name": "dataframes_example.iris",
        "description": "IrisPredictionRequest(prediction_id: str, features: dataframes_example.iris.IrisFeatures)"
      },
      "IrisFeatures": {
        "type": "object",
        "required": [
          "sepal_length",
          "sepal_width",
          "petal_length",
          "petal_width"
        ],
        "properties": {
          "sepal_length": {
            "type": "number"
          },
          "sepal_width": {
            "type": "number"
          },
          "petal_length": {
            "type": "number"
          },
          "petal_width": {
            "type": "number"
          }
        },
        "x-module-name": "hopeit.dataframes.dataframe",
        "description": "IrisFeatures_(sepal_length: float, sepal_width: float, petal_length: float, petal_width: float)"
      },
      "IrisBatchPredictionRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IrisPredictionRequest"
            }
          }
        },
        "x-module-name": "dataframes_example.iris",
        "description": "IrisBatchPredictionRequest(items: List[dataframes_example.iris.IrisPredictionRequest])"
      }
    },
    "securitySchemes": {
      "auth.basic": {
        "type": "http",
        "scheme": "basic"
      },
      "auth.bearer": {
        "type": "http",
        "scheme": "bearer"
      },
      "dataframes_example.0x24.refresh": {
        "type": "apiKey",
        "in": "cookie",
        "name": "dataframes_example.0x24.refresh"
      }
    }
  },
  "security": []
}