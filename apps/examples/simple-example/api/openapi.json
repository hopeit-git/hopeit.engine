{
  "openapi": "3.0.3",
  "info": {
    "version": "0.24",
    "title": "Simple Example",
    "description": "Simple Example"
  },
  "paths": {
    "/api/basic-auth/0x24/decode": {
      "get": {
        "summary": "Basic Auth: Decode",
        "description": "Returns decoded auth info",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information extracted from token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextUserInfo"
                }
              }
            }
          }
        },
        "tags": [
          "basic_auth.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/config-manager/0x24/runtime-apps-config": {
      "get": {
        "summary": "Config Manager: Runtime Apps Config",
        "description": "Returns the runtime config for the Apps running on this server",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": false,
            "description": "URL used to reach this server, informative",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand_events",
            "in": "query",
            "required": false,
            "description": "Retrieve expanded effective events from event steps",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config info about running apps in current process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuntimeApps"
                }
              }
            }
          }
        },
        "tags": [
          "config_manager.0x24"
        ]
      }
    },
    "/api/config-manager/0x24/cluster-apps-config": {
      "get": {
        "summary": "Config Manager: Cluster Apps Config",
        "description": "Handle remote access to runtime configuration for a group of hosts",
        "parameters": [
          {
            "name": "hosts",
            "in": "query",
            "required": true,
            "description": "Comma-separated list of http://host:port strings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand_events",
            "in": "query",
            "required": true,
            "description": "Extract effective events from event steps",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Combined config info about running apps in provided list of hosts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuntimeApps"
                }
              }
            }
          }
        },
        "tags": [
          "config_manager.0x24"
        ]
      }
    },
    "/api/simple-example/0x24/list-somethings": {
      "get": {
        "summary": "Simple Example: List Objects",
        "description": "Lists all available Something objects",
        "parameters": [
          {
            "name": "wildcard",
            "in": "query",
            "required": false,
            "description": "Wildcard to filter objects by name prefixed by partition folder in format YYYY/MM/DD/HH/*",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of Something objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Something"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/list-somethings-unsecured": {
      "get": {
        "summary": "Simple Example: List Objects Unsecured",
        "description": "Lists all available Something objects",
        "parameters": [
          {
            "name": "wildcard",
            "in": "query",
            "required": false,
            "description": "Wildcard to filter objects by name prefixed by partition folder in format YYYY/MM/DD/HH/*",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of Something objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Something"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ]
      }
    },
    "/api/simple-example/0x24/query-something": {
      "get": {
        "summary": "Simple Example: Query Something",
        "description": "Loads Something from disk",
        "parameters": [
          {
            "name": "item_id",
            "in": "query",
            "required": true,
            "description": "Item Id to read",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partition_key",
            "in": "query",
            "required": true,
            "description": "Partition folder in `YYYY/MM/DD/HH` format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Something object returned when found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Something"
                }
              }
            }
          },
          "404": {
            "description": "Information about not found object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingNotFound"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      },
      "post": {
        "summary": "Simple Example: Query Something Extended",
        "description": "Loads Something from disk, update status base on POST body.\nObjects is saved with updated status and history.",
        "parameters": [
          {
            "name": "item_id",
            "in": "query",
            "required": true,
            "description": "Item Id to read",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partition_key",
            "in": "query",
            "required": true,
            "description": "Partition folder in `YYYY/MM/DD/HH` format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Status change for the retrieved object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Something object returned when found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Something"
                }
              }
            }
          },
          "404": {
            "description": "Information about not found object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingNotFound"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/save-something": {
      "post": {
        "summary": "Simple Example: Save Something",
        "description": "Creates and saves Something",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "provide `id` and `user` to create Something",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SomethingParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "path where object is saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "save_something"
                  ],
                  "properties": {
                    "save_something": {
                      "type": "string"
                    }
                  },
                  "description": "save_something string payload"
                }
              }
            }
          },
          "400": {
            "description": "bad request reason",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "save_something"
                  ],
                  "properties": {
                    "save_something": {
                      "type": "string"
                    }
                  },
                  "description": "save_something string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/download-something": {
      "get": {
        "summary": "Simple Example: Download Something",
        "description": "Download image file. The PostprocessHook return the requested file as stream.",
        "parameters": [
          {
            "name": "file_name",
            "in": "query",
            "required": true,
            "description": "return file name, try with something.png",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return requested image file",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Image file not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "download_something"
                  ],
                  "properties": {
                    "download_something": {
                      "type": "string"
                    }
                  },
                  "description": "download_something string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/download-something-streamed": {
      "get": {
        "summary": "Simple Example: Download Something Streamed",
        "description": "Download streamd created content as file.\nThe PostprocessHook return the requested resource as stream using `prepare_stream_response`.",
        "parameters": [
          {
            "name": "file_name",
            "in": "query",
            "required": true,
            "description": "expected return file name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return content with filename=`file_name`",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ]
      }
    },
    "/api/simple-example/0x24/upload-something": {
      "post": {
        "summary": "Simple Example: Multipart Upload files",
        "description": "Upload files using Multipart form request",
        "parameters": [
          {
            "name": "something_id",
            "in": "query",
            "required": true,
            "description": "something_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "user",
                  "attachment",
                  "object"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id"
                  },
                  "user": {
                    "type": "string",
                    "description": "user"
                  },
                  "attachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "attachment"
                  },
                  "object": {
                    "$ref": "#/components/schemas/Something",
                    "description": "object"
                  }
                }
              },
              "encoding": {
                "id": {
                  "contentType": "text/plain"
                },
                "user": {
                  "contentType": "text/plain"
                },
                "attachment": {
                  "contentType": "application/octect-stream"
                },
                "object": {
                  "contentType": "application/json"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "list of created Something objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Something"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "upload_something"
                  ],
                  "properties": {
                    "upload_something": {
                      "type": "string"
                    }
                  },
                  "description": "upload_something string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/streams/something-event": {
      "post": {
        "summary": "Simple Example: Something Event",
        "description": "Submits a Something object to a stream to be processed asynchronously by process-events app event",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Something object to submitted to stream",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Something"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Something object with status submitted to string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Something"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/collector/query-concurrently": {
      "post": {
        "summary": "Simple Example: Query Concurrently",
        "description": "Loads 2 Something objects concurrently from disk and combine the results\nusing `collector` steps constructor (instantiating an `AsyncCollector`)",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Items to read concurrently",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of one or two Something objects returned found, empty list if none is found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Something"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/collector/collect-spawn": {
      "post": {
        "summary": "Simple Example: Collect and Spawn",
        "description": "Loads 2 Something objects concurrently from disk, combine the results\nusing `collector` steps constructor (instantiating an `AsyncCollector`)\nthen spawn the items found individually into a stream",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Items to read concurrently",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of items spawned (0,1 or 2)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "collector.collect_spawn"
                  ],
                  "properties": {
                    "collector.collect_spawn": {
                      "type": "integer"
                    }
                  },
                  "description": "collector.collect_spawn integer payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/shuffle/spawn-event": {
      "post": {
        "summary": "Simple Example: Spawn Event",
        "description": "This example will spawn 3 data events, those are going to be send to a stream using SHUFFLE\nand processed in asynchronously / in parallel if multiple nodes are available",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Something object to submitted several times to stream",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Something"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "events submitted successfully message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "shuffle.spawn_event"
                  ],
                  "properties": {
                    "shuffle.spawn_event": {
                      "type": "string"
                    }
                  },
                  "description": "shuffle.spawn_event string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/shuffle/parallelize-event": {
      "post": {
        "summary": "Simple Example: Parallelize Event",
        "description": "This example will spawn 2 copies of payload data, those are going to be send to a stream using SHUFFLE\nand processed in asynchronously / in parallel if multiple nodes are available,\nthen submitted to other stream to be updated and saved",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Something object to forked and submitted to be processed concurrently",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Something"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "events submitted successfully message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "shuffle.parallelize_event"
                  ],
                  "properties": {
                    "shuffle.parallelize_event": {
                      "type": "string"
                    }
                  },
                  "description": "shuffle.parallelize_event string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/basic-auth/0x24/login": {
      "get": {
        "summary": "Basic Auth: Login",
        "description": "Handles users login using basic-auth\nand generate access tokens for external services invoking apps\nplugged in with basic-auth plugin.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication information to be used for further API calls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInfo"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "auth.basic": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/basic-auth/0x24/refresh": {
      "get": {
        "summary": "Basic Auth: Refresh",
        "description": "This event can be used for obtain new access token and update refresh token (http cookie),\nwith no need to re-login the user if there is a valid refresh token active.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refreshed authentication information to be used for further API calls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInfo"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials. An http-cookie is expected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "simple_example.0x24.refresh": []
          }
        ]
      }
    },
    "/api/simple-example/0x24/basic-auth/0x24/logout": {
      "get": {
        "summary": "Basic Auth: Logout",
        "description": "Invalidates previous refresh cookies.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logged out message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "logout"
                  ],
                  "properties": {
                    "logout": {
                      "type": "string"
                    }
                  },
                  "description": "logout string payload"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x24"
        ],
        "security": [
          {
            "simple_example.0x24.refresh": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorInfo": {
        "description": "Error information to be returned in failed responses",
        "properties": {
          "msg": {
            "title": "Msg",
            "type": "string"
          },
          "tb": {
            "items": {
              "type": "string"
            },
            "title": "Tb",
            "type": "array"
          }
        },
        "required": [
          "msg",
          "tb"
        ],
        "title": "ErrorInfo",
        "type": "object"
      },
      "ContextUserInfo": {
        "description": "User info that will be available in context during events execution",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "user": {
            "title": "User",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user",
          "email"
        ],
        "title": "ContextUserInfo",
        "type": "object"
      },
      "AuthInfo": {
        "description": "Minimal auth info that should be returned outside this app",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "token_type": {
            "title": "Token Type",
            "type": "string"
          },
          "renew": {
            "title": "Renew",
            "type": "integer"
          }
        },
        "required": [
          "access_token",
          "token_type",
          "renew"
        ],
        "title": "AuthInfo",
        "type": "object"
      },
      "EventConnection": {
        "description": "EventConnection: describes dependencies on this event when calling\nevent on apps configured in `app_connections` sections. Only events\nspecified are allowed to be invoked using `hopeit.client`\n\n:field: app_connection, str: key of app entry used in app_connections sections\n:field: event, str: target event_name to be called\n:filed: type, EventConnectionType: a valid event connection type, i.e. GET or POST\n:field: route, optional str: custom route in case event is not attached to default `app/version/event`",
        "properties": {
          "app_connection": {
            "title": "App Connection",
            "type": "string"
          },
          "event": {
            "title": "Event",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EventConnectionType"
          }
        },
        "required": [
          "app_connection",
          "event",
          "type"
        ],
        "title": "EventConnection",
        "type": "object"
      },
      "EventConnectionType": {
        "description": "Event connection type",
        "enum": [
          "GET",
          "POST"
        ],
        "title": "EventConnectionType",
        "type": "string"
      },
      "Status": {
        "description": "Status change",
        "properties": {
          "ts": {
            "format": "date-time",
            "title": "Ts",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/StatusType"
          }
        },
        "required": [
          "ts",
          "type"
        ],
        "title": "Status",
        "type": "object"
      },
      "StatusType": {
        "enum": [
          "NEW",
          "LOADED",
          "SUBMITTED",
          "PROCESSED"
        ],
        "title": "StatusType",
        "type": "string"
      },
      "User": {
        "description": "User information",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "title": "User",
        "type": "object"
      },
      "SomethingNotFound": {
        "description": "Item not found in datastore",
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "path",
          "id"
        ],
        "title": "SomethingNotFound",
        "type": "object"
      },
      "SomethingParams": {
        "description": "Params to create and save Something",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "user": {
            "title": "User",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user"
        ],
        "title": "SomethingParams",
        "type": "object"
      },
      "Something": {
        "description": "Example Something event",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "default": null,
            "nullable": true
          },
          "history": {
            "items": {
              "$ref": "#/components/schemas/Status"
            },
            "title": "History",
            "type": "array"
          }
        },
        "required": [
          "id",
          "user"
        ],
        "title": "Something",
        "type": "object"
      },
      "ItemsInfo": {
        "description": "Items to read concurrently",
        "properties": {
          "item1_id": {
            "title": "Item1 Id",
            "type": "string"
          },
          "item2_id": {
            "title": "Item2 Id",
            "type": "string"
          },
          "partition_key": {
            "default": "",
            "title": "Partition Key",
            "type": "string"
          }
        },
        "required": [
          "item1_id",
          "item2_id"
        ],
        "title": "ItemsInfo",
        "type": "object"
      }
    },
    "securitySchemes": {
      "auth.basic": {
        "type": "http",
        "scheme": "basic"
      },
      "auth.bearer": {
        "type": "http",
        "scheme": "bearer"
      },
      "simple_example.0x24.refresh": {
        "type": "apiKey",
        "in": "cookie",
        "name": "simple_example.0x24.refresh"
      }
    }
  },
  "security": []
}