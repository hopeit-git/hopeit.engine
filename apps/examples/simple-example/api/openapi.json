{
  "openapi": "3.0.3",
  "info": {
    "version": "0.25",
    "title": "Simple Example",
    "description": "Simple Example"
  },
  "paths": {
    "/api/basic-auth/0x25/decode": {
      "get": {
        "summary": "Basic Auth: Decode",
        "description": "Returns decoded auth info",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information extracted from token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextUserInfo"
                }
              }
            }
          }
        },
        "tags": [
          "basic_auth.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/config-manager/0x25/runtime-apps-config": {
      "get": {
        "summary": "Config Manager: Runtime Apps Config",
        "description": "Returns the runtime config for the Apps running on this server",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": false,
            "description": "URL used to reach this server, informative",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand_events",
            "in": "query",
            "required": false,
            "description": "Retrieve expanded effective events from event steps",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config info about running apps in current process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuntimeApps"
                }
              }
            }
          }
        },
        "tags": [
          "config_manager.0x25"
        ]
      }
    },
    "/api/config-manager/0x25/cluster-apps-config": {
      "get": {
        "summary": "Config Manager: Cluster Apps Config",
        "description": "Handle remote access to runtime configuration for a group of hosts",
        "parameters": [
          {
            "name": "hosts",
            "in": "query",
            "required": true,
            "description": "Comma-separated list of http://host:port strings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand_events",
            "in": "query",
            "required": true,
            "description": "Extract effective events from event steps",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Combined config info about running apps in provided list of hosts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuntimeApps"
                }
              }
            }
          }
        },
        "tags": [
          "config_manager.0x25"
        ]
      }
    },
    "/api/simple-example/0x25/list-somethings": {
      "get": {
        "summary": "Simple Example: List Objects",
        "description": "Lists all available Something objects",
        "parameters": [
          {
            "name": "wildcard",
            "in": "query",
            "required": false,
            "description": "Wildcard to filter objects by name prefixed by partition folder in format YYYY/MM/DD/HH/*",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of Something objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Something"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/list-somethings-unsecured": {
      "get": {
        "summary": "Simple Example: List Objects Unsecured",
        "description": "Lists all available Something objects",
        "parameters": [
          {
            "name": "wildcard",
            "in": "query",
            "required": false,
            "description": "Wildcard to filter objects by name prefixed by partition folder in format YYYY/MM/DD/HH/*",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of Something objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Something"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ]
      }
    },
    "/api/simple-example/0x25/query-something": {
      "get": {
        "summary": "Simple Example: Query Something",
        "description": "Loads Something from disk",
        "parameters": [
          {
            "name": "item_id",
            "in": "query",
            "required": true,
            "description": "Item Id to read",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partition_key",
            "in": "query",
            "required": true,
            "description": "Partition folder in `YYYY/MM/DD/HH` format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Something object returned when found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Something"
                }
              }
            }
          },
          "404": {
            "description": "Information about not found object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingNotFound"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      },
      "post": {
        "summary": "Simple Example: Query Something Extended",
        "description": "Loads Something from disk, update status base on POST body.\nObjects is saved with updated status and history.",
        "parameters": [
          {
            "name": "item_id",
            "in": "query",
            "required": true,
            "description": "Item Id to read",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partition_key",
            "in": "query",
            "required": true,
            "description": "Partition folder in `YYYY/MM/DD/HH` format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Status change for the retrieved object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Something object returned when found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Something"
                }
              }
            }
          },
          "404": {
            "description": "Information about not found object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingNotFound"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/save-something": {
      "post": {
        "summary": "Simple Example: Save Something",
        "description": "Creates and saves Something",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "provide `id` and `user` to create Something",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SomethingParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "path where object is saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "save_something"
                  ],
                  "properties": {
                    "save_something": {
                      "type": "string"
                    }
                  },
                  "description": "save_something string payload"
                }
              }
            }
          },
          "400": {
            "description": "bad request reason",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "save_something"
                  ],
                  "properties": {
                    "save_something": {
                      "type": "string"
                    }
                  },
                  "description": "save_something string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/download-something": {
      "get": {
        "summary": "Simple Example: Download Something",
        "description": "Download image file. The PostprocessHook return the requested file as stream.",
        "parameters": [
          {
            "name": "file_name",
            "in": "query",
            "required": true,
            "description": "return file name, try with something.png",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return requested image file",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Image file not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "download_something"
                  ],
                  "properties": {
                    "download_something": {
                      "type": "string"
                    }
                  },
                  "description": "download_something string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/download-something-streamed": {
      "get": {
        "summary": "Simple Example: Download Something Streamed",
        "description": "Download streamd created content as file.\nThe PostprocessHook return the requested resource as stream using `prepare_stream_response`.",
        "parameters": [
          {
            "name": "file_name",
            "in": "query",
            "required": true,
            "description": "expected return file name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return content with filename=`file_name`",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ]
      }
    },
    "/api/simple-example/0x25/upload-something": {
      "post": {
        "summary": "Simple Example: Multipart Upload files",
        "description": "Upload files using Multipart form request",
        "parameters": [
          {
            "name": "something_id",
            "in": "query",
            "required": true,
            "description": "something_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "user",
                  "attachment",
                  "object"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id"
                  },
                  "user": {
                    "type": "string",
                    "description": "user"
                  },
                  "attachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "attachment"
                  },
                  "object": {
                    "$ref": "#/components/schemas/Something",
                    "description": "object"
                  }
                }
              },
              "encoding": {
                "id": {
                  "contentType": "text/plain"
                },
                "user": {
                  "contentType": "text/plain"
                },
                "attachment": {
                  "contentType": "application/octect-stream"
                },
                "object": {
                  "contentType": "application/json"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "list of created Something objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Something"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "upload_something"
                  ],
                  "properties": {
                    "upload_something": {
                      "type": "string"
                    }
                  },
                  "description": "upload_something string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/streams/something-event": {
      "post": {
        "summary": "Simple Example: Something Event",
        "description": "Submits a Something object to a stream to be processed asynchronously by process-events app event",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Something object to submitted to stream",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Something"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Something object with status submitted to string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Something"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/collector/query-concurrently": {
      "post": {
        "summary": "Simple Example: Query Concurrently",
        "description": "Loads 2 Something objects concurrently from disk and combine the results\nusing `collector` steps constructor (instantiating an `AsyncCollector`)",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Items to read concurrently",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of one or two Something objects returned found, empty list if none is found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Something"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/collector/collect-spawn": {
      "post": {
        "summary": "Simple Example: Collect and Spawn",
        "description": "Loads 2 Something objects concurrently from disk, combine the results\nusing `collector` steps constructor (instantiating an `AsyncCollector`)\nthen spawn the items found individually into a stream",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Items to read concurrently",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of items spawned (0,1 or 2)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "collector.collect_spawn"
                  ],
                  "properties": {
                    "collector.collect_spawn": {
                      "type": "integer"
                    }
                  },
                  "description": "collector.collect_spawn integer payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/shuffle/spawn-event": {
      "post": {
        "summary": "Simple Example: Spawn Event",
        "description": "This example will spawn 3 data events, those are going to be send to a stream using SHUFFLE\nand processed in asynchronously / in parallel if multiple nodes are available",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Something object to submitted several times to stream",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Something"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "events submitted successfully message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "shuffle.spawn_event"
                  ],
                  "properties": {
                    "shuffle.spawn_event": {
                      "type": "string"
                    }
                  },
                  "description": "shuffle.spawn_event string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/shuffle/parallelize-event": {
      "post": {
        "summary": "Simple Example: Parallelize Event",
        "description": "This example will spawn 2 copies of payload data, those are going to be send to a stream using SHUFFLE\nand processed in asynchronously / in parallel if multiple nodes are available,\nthen submitted to other stream to be updated and saved",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "requestBody": {
          "description": "Something object to forked and submitted to be processed concurrently",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Something"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "events submitted successfully message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "shuffle.parallelize_event"
                  ],
                  "properties": {
                    "shuffle.parallelize_event": {
                      "type": "string"
                    }
                  },
                  "description": "shuffle.parallelize_event string payload"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.bearer": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/basic-auth/0x25/login": {
      "get": {
        "summary": "Basic Auth: Login",
        "description": "Handles users login using basic-auth\nand generate access tokens for external services invoking apps\nplugged in with basic-auth plugin.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication information to be used for further API calls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInfo"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "auth.basic": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/basic-auth/0x25/refresh": {
      "get": {
        "summary": "Basic Auth: Refresh",
        "description": "This event can be used for obtain new access token and update refresh token (http cookie),\nwith no need to re-login the user if there is a valid refresh token active.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refreshed authentication information to be used for further API calls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInfo"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials. An http-cookie is expected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "simple_example.0x25.refresh": []
          }
        ]
      }
    },
    "/api/simple-example/0x25/basic-auth/0x25/logout": {
      "get": {
        "summary": "Basic Auth: Logout",
        "description": "Invalidates previous refresh cookies.",
        "parameters": [
          {
            "name": "X-Track-Request-Id",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Track-Request-Ts",
            "in": "header",
            "required": false,
            "description": "Track information: Request-Ts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "X-Track-Caller",
            "in": "header",
            "required": true,
            "description": "Track information: track.caller",
            "schema": {
              "type": "string",
              "default": "test.caller"
            }
          },
          {
            "name": "X-Track-Session-Id",
            "in": "header",
            "required": true,
            "description": "Track information: track.session_id",
            "schema": {
              "type": "string",
              "default": "test.session_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logged out message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "logout"
                  ],
                  "properties": {
                    "logout": {
                      "type": "string"
                    }
                  },
                  "description": "logout string payload"
                }
              }
            }
          },
          "401": {
            "description": "Login failed, invalid credentials or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "tags": [
          "simple_example.0x25"
        ],
        "security": [
          {
            "simple_example.0x25.refresh": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorInfo": {
        "description": "Error information to be returned in failed responses",
        "properties": {
          "msg": {
            "title": "Msg",
            "type": "string"
          },
          "tb": {
            "items": {
              "type": "string"
            },
            "title": "Tb",
            "type": "array"
          }
        },
        "required": [
          "msg",
          "tb"
        ],
        "title": "ErrorInfo",
        "type": "object"
      },
      "ContextUserInfo": {
        "description": "User info that will be available in context during events execution",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "user": {
            "title": "User",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user",
          "email"
        ],
        "title": "ContextUserInfo",
        "type": "object"
      },
      "AuthInfo": {
        "description": "Minimal auth info that should be returned outside this app",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "token_type": {
            "title": "Token Type",
            "type": "string"
          },
          "renew": {
            "title": "Renew",
            "type": "integer"
          }
        },
        "required": [
          "access_token",
          "token_type",
          "renew"
        ],
        "title": "AuthInfo",
        "type": "object"
      },
      "APIConfig": {
        "description": "Config for Open API docs page",
        "properties": {
          "docs_path": {
            "default": null,
            "nullable": true,
            "title": "Docs Path",
            "type": "string"
          }
        },
        "title": "APIConfig",
        "type": "object"
      },
      "AppConfig": {
        "description": "App Configuration container",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/AppDescriptor"
          },
          "engine": {
            "$ref": "#/components/schemas/AppEngineConfig"
          },
          "app_connections": {
            "additionalProperties": {
              "$ref": "#/components/schemas/AppConnection"
            },
            "title": "App Connections",
            "type": "object"
          },
          "env": {
            "additionalProperties": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "type": "object"
            },
            "title": "Env",
            "type": "object"
          },
          "events": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EventDescriptor"
            },
            "title": "Events",
            "type": "object"
          },
          "server": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerConfig"
              }
            ],
            "default": null,
            "nullable": true
          },
          "plugins": {
            "items": {
              "$ref": "#/components/schemas/AppDescriptor"
            },
            "title": "Plugins",
            "type": "array"
          },
          "settings": {
            "additionalProperties": {
              "type": "object"
            },
            "title": "Settings",
            "type": "object"
          },
          "effective_settings": {
            "additionalProperties": {
              "type": "object"
            },
            "default": null,
            "nullable": true,
            "title": "Effective Settings",
            "type": "object"
          }
        },
        "required": [
          "app"
        ],
        "title": "AppConfig",
        "type": "object"
      },
      "AppConnection": {
        "description": "AppConnections: metadata to initialize app client in order to connect\nand issue requests to other running apps\n\n:field: name, str: target app name to connect to\n:field: version, str: target app version\n:field: client, str: hopeit.app.client.Client class implementation, from available client plugins\n:field: settings, optional str: key under `settings` section of app config containing connection configuration,\n    if not specified, plugin will lookup its default section usually the plugin name. But in case multiple\n    clients need to be configured, this value can be overridden.",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "type": "string"
          },
          "client": {
            "default": "<<NO CLIENT CONFIGURED>>",
            "title": "Client",
            "type": "string"
          },
          "settings": {
            "default": null,
            "nullable": true,
            "title": "Settings",
            "type": "string"
          },
          "plugin_name": {
            "default": null,
            "nullable": true,
            "title": "Plugin Name",
            "type": "string"
          },
          "plugin_version": {
            "default": null,
            "nullable": true,
            "title": "Plugin Version",
            "type": "string"
          }
        },
        "required": [
          "name",
          "version"
        ],
        "title": "AppConnection",
        "type": "object"
      },
      "AppDescriptor": {
        "description": "App descriptor",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "type": "string"
          }
        },
        "required": [
          "name",
          "version"
        ],
        "title": "AppDescriptor",
        "type": "object"
      },
      "AppEngineConfig": {
        "description": "Engine specific parameters shared among events\n\n:field import_modules: list of string with the python module names to import to find\n    events and datatype implementations\n:field read_stream_timeout: timeout in milliseconds to block connection pool when waiting for stream events\n:field read_stream_interval: delay in milliseconds to wait before attempting a new batch. Use to prevent\n    connection pool to be blocked constantly.\n:track_headers: list of required X-Track-* headers\n:cors_origin: allowed CORS origin for web server",
        "properties": {
          "import_modules": {
            "default": null,
            "items": {
              "type": "string"
            },
            "nullable": true,
            "title": "Import Modules",
            "type": "array"
          },
          "read_stream_timeout": {
            "default": 1000,
            "title": "Read Stream Timeout",
            "type": "integer"
          },
          "read_stream_interval": {
            "default": 1000,
            "title": "Read Stream Interval",
            "type": "integer"
          },
          "default_stream_compression": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Compression"
              }
            ],
            "default": "lz4"
          },
          "default_stream_serialization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Serialization"
              }
            ],
            "default": "json+base64"
          },
          "track_headers": {
            "items": {
              "type": "string"
            },
            "title": "Track Headers",
            "type": "array"
          },
          "cors_origin": {
            "default": null,
            "nullable": true,
            "title": "Cors Origin",
            "type": "string"
          }
        },
        "title": "AppEngineConfig",
        "type": "object"
      },
      "AuthConfig": {
        "description": "Server configuration to handle authorization tokens",
        "properties": {
          "secrets_location": {
            "title": "Secrets Location",
            "type": "string"
          },
          "auth_passphrase": {
            "title": "Auth Passphrase",
            "type": "string"
          },
          "enabled": {
            "default": true,
            "title": "Enabled",
            "type": "boolean"
          },
          "create_keys": {
            "default": false,
            "title": "Create Keys",
            "type": "boolean"
          },
          "domain": {
            "default": null,
            "nullable": true,
            "title": "Domain",
            "type": "string"
          },
          "encryption_algorithm": {
            "default": "RS256",
            "title": "Encryption Algorithm",
            "type": "string"
          },
          "default_auth_methods": {
            "items": {
              "$ref": "#/components/schemas/AuthType"
            },
            "title": "Default Auth Methods",
            "type": "array"
          }
        },
        "required": [
          "secrets_location",
          "auth_passphrase"
        ],
        "title": "AuthConfig",
        "type": "object"
      },
      "AuthType": {
        "description": "Supported Authorization/Authentication types",
        "enum": [
          "Unsecured",
          "Basic",
          "Bearer",
          "Refresh"
        ],
        "title": "AuthType",
        "type": "string"
      },
      "Compression": {
        "description": "Available compression algorithms and levels for event payloads.",
        "enum": [
          "none",
          "lz4",
          "lz4:0",
          "lz4:16",
          "zip",
          "zip:1",
          "zip:9",
          "gzip",
          "gzip:1",
          "gzip:9",
          "bz2",
          "bz2:1",
          "bz2:9",
          "lzma"
        ],
        "title": "Compression",
        "type": "string"
      },
      "EventConnection": {
        "description": "EventConnection: describes dependencies on this event when calling\nevent on apps configured in `app_connections` sections. Only events\nspecified are allowed to be invoked using `hopeit.client`\n\n:field: app_connection, str: key of app entry used in app_connections sections\n:field: event, str: target event_name to be called\n:filed: type, EventConnectionType: a valid event connection type, i.e. GET or POST\n:field: route, optional str: custom route in case event is not attached to default `app/version/event`",
        "properties": {
          "app_connection": {
            "title": "App Connection",
            "type": "string"
          },
          "event": {
            "title": "Event",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EventConnectionType"
          }
        },
        "required": [
          "app_connection",
          "event",
          "type"
        ],
        "title": "EventConnection",
        "type": "object"
      },
      "EventConnectionType": {
        "description": "Event connection type",
        "enum": [
          "GET",
          "POST"
        ],
        "title": "EventConnectionType",
        "type": "string"
      },
      "EventDescriptor": {
        "description": "Event Descriptor: configures event implementation\n\n:field: type, EventType: type of event i.e.: GET, POST, MULTIPART, STREAM, SERVICE, SETUP\n:field: plug_mode, EventPlugMode: defines whether an event defined in a plugin is created in the\n    current app (ON_APP) or it will be created in the original plugin (STANDALONE, default)\n:field: route, optional str: custom route for endpoint. If not specified route will be derived\n    from `/api/app_name/app_version/event_name`\n:field: impl, optional str: custom event implementation Python module. If not specified, module\n    with same same as event will be imported.\n:field: connections, list of EventConnection: specifies dependencies on other apps/endpoints,\n    that can be used by client plugins to call events on external apps\n:field: read_stream, optional ReadStreamDescriptor: specifies source stream to read from.\n    Valid only for STREAM events.\n:field: write_stream, optional WriteStreamDescriptor: for any type of events, resultant dataobjects will\n    be published to the specified stream.\n:field: auth, list of AuthType: supported authentication schemas for this event. If not specified\n    application default will be used.\n:field: setting_keys, list of str: by default EventContext will have access to the settings section\n    with the same name of the event using `settings = context.settings(datatype=MySettingsType)`.\n    In case additional sections are needed to be accessed from\n    EventContext, then a list of setting keys, including the name of the event if needed,\n    can be specified here. Then access to a `custom` key can be done using\n    `custom_settings = context.settings(key=\"customer\", datatype=MyCustomSettingsType)`\n:field: dataobjects, list of str: list of full qualified dataobject types that this event can process.\n    When not specified, the engine will inspect the module implementation and find all datatypes supported\n    as payload in the functions defined as `__steps__`. In case of generic functions that support\n    `payload: DataObject` argument, then a list of full qualified datatypes must be specified here.\n:field: group, str: group name, if none is assigned it is automatically assigned as 'DEFAULT'.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "plug_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventPlugMode"
              }
            ],
            "default": "Standalone"
          },
          "route": {
            "default": null,
            "nullable": true,
            "title": "Route",
            "type": "string"
          },
          "impl": {
            "default": null,
            "nullable": true,
            "title": "Impl",
            "type": "string"
          },
          "connections": {
            "items": {
              "$ref": "#/components/schemas/EventConnection"
            },
            "title": "Connections",
            "type": "array"
          },
          "read_stream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReadStreamDescriptor"
              }
            ],
            "default": null,
            "nullable": true
          },
          "write_stream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WriteStreamDescriptor"
              }
            ],
            "default": null,
            "nullable": true
          },
          "auth": {
            "items": {
              "$ref": "#/components/schemas/AuthType"
            },
            "title": "Auth",
            "type": "array"
          },
          "setting_keys": {
            "items": {
              "type": "string"
            },
            "title": "Setting Keys",
            "type": "array"
          },
          "dataobjects": {
            "items": {
              "type": "string"
            },
            "title": "Dataobjects",
            "type": "array"
          },
          "group": {
            "default": "DEFAULT",
            "title": "Group",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "EventDescriptor",
        "type": "object"
      },
      "EventPlugMode": {
        "description": "Defines how an event route is plugged into apps when\nit is used as a plugin.\n\nSTANDALONE: The event is added as a normal route where it is defined. Not added to apps.\nON_APP: The event route is added only to app routes where it is used as a plugin.",
        "enum": [
          "Standalone",
          "OnApp"
        ],
        "title": "EventPlugMode",
        "type": "string"
      },
      "EventType": {
        "description": "Supported event types\n\nGET: event triggered from api get endpoint\nPOST: event triggered from api post endpoint\nSTREAM: event triggered read events from stream. Can be started and stopped.\nSERVICE: event executed on demand or continuously. Long lived. Can be started and stopped.\nMULTIPART: event triggered from api postform-multipart request via endpoint.\nSETUP: event that is executed once when service is starting",
        "enum": [
          "GET",
          "POST",
          "STREAM",
          "SERVICE",
          "MULTIPART",
          "SETUP"
        ],
        "title": "EventType",
        "type": "string"
      },
      "LoggingConfig": {
        "properties": {
          "log_level": {
            "default": "INFO",
            "title": "Log Level",
            "type": "string"
          },
          "log_path": {
            "default": "logs/",
            "title": "Log Path",
            "type": "string"
          }
        },
        "title": "LoggingConfig",
        "type": "object"
      },
      "ReadStreamDescriptor": {
        "description": "Configuration to read streams\n\n:field stream_name: str, base stream name to read\n:consumer_group: str, consumer group to send to stream processing engine to keep track of\n    next messag to consume\n:queues: List[str], list of queue names to poll from. Each queue act as separate stream\n    with queue name used as stream name suffix, where `AUTO` queue name means to consume\n    events when no queue where specified at publish time, allowing to consume message with different\n    priorities without waiting for all events in the stream to be consumed.\n    Queues specified in this entry will be consumed by this event\n    on each poll cycle, on the order specified. If not present\n    only AUTO queue will be consumed. Take into account that in applications using multiple\n    queue names, in order to ensure all messages are consumed, all queue names should be listed\n    here including AUTO, except that the app is intentionally designed for certain events to\n    consume only from specific queues. This configuration is manual to allow consuming messages\n    produced by external apps.",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "consumer_group": {
            "title": "Consumer Group",
            "type": "string"
          },
          "queues": {
            "items": {
              "type": "string"
            },
            "title": "Queues",
            "type": "array"
          }
        },
        "required": [
          "name",
          "consumer_group"
        ],
        "title": "ReadStreamDescriptor",
        "type": "object"
      },
      "RuntimeAppInfo": {
        "description": "Application config information associated to servers at runtime",
        "properties": {
          "servers": {
            "items": {
              "$ref": "#/components/schemas/ServerInfo"
            },
            "title": "Servers",
            "type": "array"
          },
          "app_config": {
            "$ref": "#/components/schemas/AppConfig"
          },
          "effective_events": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EventDescriptor"
            },
            "title": "Effective Events",
            "type": "object"
          }
        },
        "required": [
          "servers",
          "app_config",
          "effective_events"
        ],
        "title": "RuntimeAppInfo",
        "type": "object"
      },
      "Serialization": {
        "description": "Available serialization methods for event payloads.",
        "enum": [
          "json",
          "json+base64",
          "pickle:3",
          "pickle:4",
          "pickle:5"
        ],
        "title": "Serialization",
        "type": "string"
      },
      "ServerConfig": {
        "description": "Server configuration",
        "properties": {
          "streams": {
            "$ref": "#/components/schemas/StreamsConfig"
          },
          "logging": {
            "$ref": "#/components/schemas/LoggingConfig"
          },
          "auth": {
            "$ref": "#/components/schemas/AuthConfig"
          },
          "api": {
            "$ref": "#/components/schemas/APIConfig"
          },
          "engine_version": {
            "default": "0.25.0b5",
            "title": "Engine Version",
            "type": "string"
          }
        },
        "title": "ServerConfig",
        "type": "object"
      },
      "ServerInfo": {
        "description": "Server info associated with runtime apps",
        "properties": {
          "host_name": {
            "title": "Host Name",
            "type": "string"
          },
          "pid": {
            "title": "Pid",
            "type": "string"
          },
          "url": {
            "default": "in-process",
            "title": "Url",
            "type": "string"
          }
        },
        "required": [
          "host_name",
          "pid"
        ],
        "title": "ServerInfo",
        "type": "object"
      },
      "ServerStatus": {
        "enum": [
          "ALIVE",
          "ERROR"
        ],
        "title": "ServerStatus",
        "type": "string"
      },
      "StreamQueueStrategy": {
        "description": "Different strategies to be used when reading streams from a queue and writing to another stream.\n\n:field PROPAGATE: original queue name will be preserved, so messages consumed from a queue will\n    maintain that queue name when published\n:field DROP: queue name will be dropped, so messages will be published only to queue specified in\n    `write_stream` configuration, or default queue if not specified.",
        "enum": [
          "PROPAGATE",
          "DROP"
        ],
        "title": "StreamQueueStrategy",
        "type": "string"
      },
      "StreamsConfig": {
        "description": "Configuration class for stream connection settings.\n\n:stream_manager: str: Stream manager class name. Default is \"hopeit.streams.NoStreamManager\".\n:field connection_str: str, url to connect to streams server: i.e. redis://localhost:6379\n    if using redis stream manager plugin to connect locally\n:field username: SecretStr: Username for authentication. Default is an empty secret string.\n:field password: SecretStr: Password for authentication. Default is an empty secret string.\n:field delay_auto_start_seconds: int: Delay in seconds before auto-starting the stream.\n    Default is 3 seconds.\n:field initial_backoff_seconds: float: Initial backoff time in seconds for connection retries.\n    Default is 1.0 second.\n:field max_backoff_seconds: float: Maximum backoff time in seconds for connection retries.\n    Default is 60.0 seconds.\n:field num_failures_open_circuit_breaker: int: Number of failures before opening the circuit breaker.\n    Default is 1.\n\nNote:\n    hopeit.engine provides `hopeit.redis_streams.RedisStreamManager` as the default plugin for stream management.",
        "properties": {
          "stream_manager": {
            "default": "hopeit.streams.NoStreamManager",
            "title": "Stream Manager",
            "type": "string"
          },
          "connection_str": {
            "default": "<<NoStreamManager>>",
            "title": "Connection Str",
            "type": "string"
          },
          "username": {
            "format": "password",
            "title": "Username",
            "type": "string",
            "writeOnly": true
          },
          "password": {
            "format": "password",
            "title": "Password",
            "type": "string",
            "writeOnly": true
          },
          "delay_auto_start_seconds": {
            "default": 3,
            "title": "Delay Auto Start Seconds",
            "type": "integer"
          },
          "initial_backoff_seconds": {
            "default": 1.0,
            "title": "Initial Backoff Seconds",
            "type": "number"
          },
          "max_backoff_seconds": {
            "default": 60.0,
            "title": "Max Backoff Seconds",
            "type": "number"
          },
          "num_failures_open_circuit_breaker": {
            "default": 1,
            "title": "Num Failures Open Circuit Breaker",
            "type": "integer"
          }
        },
        "title": "StreamsConfig",
        "type": "object"
      },
      "WriteStreamDescriptor": {
        "description": "Configuration to publish messages to a stream\n\n:field: name, str: stream name\n:field: queue, List[str], queue names to be used to publish to stream.\n    Each queue act as separate stream with queue name used as stream name suffix,\n    allowing to publish messages to i.e. a queue that will be consumed with priority,\n    or to multiple queues that will be consumed by different readers.\n    Queue suffix will be propagated through events, allowing an event in a defined queue\n    and successive events in following steps to be consumed using same queue name.\n    Notice that queue will be applied only to messages coming from default queue\n    (where queue is not specified at intial message creation). Messages consumed\n    from other queues will be published using same queue name as they have when consumed.\n:field queue_stategory: strategy to be used when consuming messages from a stream\n    with a queue name and publishing to another stream. Default is `StreamQueueStrategy.DROP`,\n    so in case of complex stream propagating queue names are configured,\n    `StreamQueueStrategy.PROPAGATE` must be explicitly specified.",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "queues": {
            "items": {
              "type": "string"
            },
            "title": "Queues",
            "type": "array"
          },
          "queue_strategy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StreamQueueStrategy"
              }
            ],
            "default": "DROP"
          }
        },
        "required": [
          "name"
        ],
        "title": "WriteStreamDescriptor",
        "type": "object"
      },
      "RuntimeApps": {
        "description": "Combined App Config and Server Status information for running apps",
        "properties": {
          "apps": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RuntimeAppInfo"
            },
            "title": "Apps",
            "type": "object"
          },
          "server_status": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ServerStatus"
            },
            "title": "Server Status",
            "type": "object"
          }
        },
        "required": [
          "apps"
        ],
        "title": "RuntimeApps",
        "type": "object"
      },
      "Status": {
        "description": "Status change",
        "properties": {
          "ts": {
            "format": "date-time",
            "title": "Ts",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/StatusType"
          }
        },
        "required": [
          "ts",
          "type"
        ],
        "title": "Status",
        "type": "object"
      },
      "StatusType": {
        "enum": [
          "NEW",
          "LOADED",
          "SUBMITTED",
          "PROCESSED"
        ],
        "title": "StatusType",
        "type": "string"
      },
      "User": {
        "description": "User information",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "title": "User",
        "type": "object"
      },
      "Something": {
        "description": "Example Something event",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "default": null,
            "nullable": true
          },
          "history": {
            "items": {
              "$ref": "#/components/schemas/Status"
            },
            "title": "History",
            "type": "array"
          }
        },
        "required": [
          "id",
          "user"
        ],
        "title": "Something",
        "type": "object"
      },
      "SomethingNotFound": {
        "description": "Item not found in datastore",
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "path",
          "id"
        ],
        "title": "SomethingNotFound",
        "type": "object"
      },
      "SomethingParams": {
        "description": "Params to create and save Something",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "user": {
            "title": "User",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user"
        ],
        "title": "SomethingParams",
        "type": "object"
      },
      "ItemsInfo": {
        "description": "Items to read concurrently",
        "properties": {
          "item1_id": {
            "title": "Item1 Id",
            "type": "string"
          },
          "item2_id": {
            "title": "Item2 Id",
            "type": "string"
          },
          "partition_key": {
            "default": "",
            "title": "Partition Key",
            "type": "string"
          }
        },
        "required": [
          "item1_id",
          "item2_id"
        ],
        "title": "ItemsInfo",
        "type": "object"
      }
    },
    "securitySchemes": {
      "auth.basic": {
        "type": "http",
        "scheme": "basic"
      },
      "auth.bearer": {
        "type": "http",
        "scheme": "bearer"
      },
      "simple_example.0x25.refresh": {
        "type": "apiKey",
        "in": "cookie",
        "name": "simple_example.0x25.refresh"
      }
    }
  },
  "security": []
}